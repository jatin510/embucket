create table :
query context QueryContext { database: Some("test_db"), schema: Some("public"), worksheet_id: Some(1748275324317) }
statement in execute function Statement(CreateTable(CreateTable { or_replace: false, temporary: false, external: false, global: None, if_not_exists: false, transient: false, volatile: false, iceberg: false, name: ObjectName([Identifier(Ident { value: "test_table", quote_style: None, span: Span(Location(1,14)..Location(1,24)) })]), columns: [ColumnDef { name: Ident { value: "name", quote_style: None, span: Span(Location(1,25)..Location(1,29)) }, data_type: Varchar(Some(IntegerLength { length: 20, unit: None })), options: [] }], constraints: [], hive_distribution: NONE, hive_formats: Some(HiveFormat { row_format: None, serde_properties: None, storage: None, location: None }), table_properties: [], with_options: [], file_format: None, location: None, query: None, without_rowid: false, like: None, clone: None, engine: None, comment: None, auto_increment_offset: None, default_charset: None, collation: None, on_commit: None, on_cluster: None, primary_key: None, order_by: None, partition_by: None, cluster_by: None, clustered_by: None, options: None, strict: false, copy_grants: false, enable_schema_evolution: None, change_tracking: None, data_retention_time_in_days: None, max_data_extension_time_in_days: None, default_ddl_collation: None, with_aggregation_policy: None, with_row_access_policy: None, with_tags: None, external_volume: None, base_location: None, catalog: None, catalog_sync: None, storage_serialization_policy: None }))
create table function called with statement: CreateTable(CreateTable { or_replace: false, temporary: false, external: false, global: None, if_not_exists: false, transient: false, volatile: false, iceberg: false, name: ObjectName([Identifier(Ident { value: "test_table", quote_style: None, span: Span(Location(1,14)..Location(1,24)) })]), columns: [ColumnDef { name: Ident { value: "name", quote_style: None, span: Span(Location(1,25)..Location(1,29)) }, data_type: Varchar(Some(IntegerLength { length: 20, unit: None })), options: [] }], constraints: [], hive_distribution: NONE, hive_formats: Some(HiveFormat { row_format: None, serde_properties: None, storage: None, location: None }), table_properties: [], with_options: [], file_format: None, location: None, query: None, without_rowid: false, like: None, clone: None, engine: None, comment: None, auto_increment_offset: None, default_charset: None, collation: None, on_commit: None, on_cluster: None, primary_key: None, order_by: None, partition_by: None, cluster_by: None, clustered_by: None, options: None, strict: false, copy_grants: false, enable_schema_evolution: None, change_tracking: None, data_retention_time_in_days: None, max_data_extension_time_in_days: None, default_ddl_collation: None, with_aggregation_policy: None, with_row_access_policy: None, with_tags: None, external_volume: None, base_location: None, catalog: None, catalog_sync: None, storage_serialization_policy: None })
satement sql_statement_to_plan CreateTable(CreateTable { or_replace: false, temporary: false, external: false, global: None, if_not_exists: false, transient: false, volatile: false, iceberg: false, name: ObjectName([Identifier(Ident { value: "test_db", quote_style: None, span: Span(Location(1,14)..Location(1,21)) }), Identifier(Ident { value: "public", quote_style: None, span: Span(Location(1,22)..Location(1,28)) }), Identifier(Ident { value: "test_table", quote_style: None, span: Span(Location(1,29)..Location(1,39)) })]), columns: [ColumnDef { name: Ident { value: "name", quote_style: None, span: Span(Location(1,41)..Location(1,45)) }, data_type: Varchar(Some(IntegerLength { length: 20, unit: None })), options: [] }], constraints: [], hive_distribution: NONE, hive_formats: Some(HiveFormat { row_format: None, serde_properties: None, storage: None, location: None }), table_properties: [], with_options: [], file_format: None, location: None, query: None, without_rowid: false, like: None, clone: None, engine: None, comment: None, auto_increment_offset: None, default_charset: None, collation: None, on_commit: None, on_cluster: None, primary_key: None, order_by: None, partition_by: None, cluster_by: None, clustered_by: None, options: None, strict: false, copy_grants: false, enable_schema_evolution: None, change_tracking: None, data_retention_time_in_days: None, max_data_extension_time_in_days: None, default_ddl_collation: None, with_aggregation_policy: None, with_row_access_policy: None, with_tags: None, external_volume: None, base_location: None, catalog: None, catalog_sync: None, storage_serialization_policy: None })
sql_statement_to_plan, result Ok(Ddl(CreateMemoryTable(CreateMemoryTable { name: Full { catalog: "test_db", schema: "public", table: "test_table" }, constraints: Constraints { inner: [] }, input: EmptyRelation(EmptyRelation { produce_one_row: false, schema: DFSchema { inner: Schema { fields: [Field { name: "name", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [None], functional_dependencies: FunctionalDependencies { deps: [] } } }), if_not_exists: false, or_replace: false, column_defaults: [], temporary: false })))
get_custom_logical_plan, result  Ok(Ddl(CreateMemoryTable(CreateMemoryTable { name: Full { catalog: "test_db", schema: "public", table: "test_table" }, constraints: Constraints { inner: [] }, input: EmptyRelation(EmptyRelation { produce_one_row: false, schema: DFSchema { inner: Schema { fields: [Field { name: "name", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [None], functional_dependencies: FunctionalDependencies { deps: [] } } }), if_not_exists: false, or_replace: false, column_defaults: [], temporary: false })))
catalog  before refresh self.catalogs; {"slatedb": Catalog { name: "slatedb", should_refresh: true, schemas_cache: {"public": Schema { schema: "", name: "public", tables_cache: {"schemas": Table { schema: "", name: "schemas", table: "" }, "tables": Table { schema: "", name: "tables", table: "" }, "databases": Table { schema: "", name: "databases", table: "" }, "volumes": Table { schema: "", name: "volumes", table: "" }} }}, catalog: "" }, "test_db": Catalog { name: "test_db", should_refresh: true, schemas_cache: {"public": Schema { schema: "", name: "public", tables_cache: {} }}, catalog: "" }}
catalog after refresh self.catalogs;   {"slatedb": Catalog { name: "slatedb", should_refresh: true, schemas_cache: {"public": Schema { schema: "", name: "public", tables_cache: {"schemas": Table { schema: "", name: "schemas", table: "" }, "databases": Table { schema: "", name: "databases", table: "" }, "volumes": Table { schema: "", name: "volumes", table: "" }, "tables": Table { schema: "", name: "tables", table: "" }} }}, catalog: "" }, "test_db": Catalog { name: "test_db", should_refresh: true, schemas_cache: {"public": Schema { schema: "", name: "public", tables_cache: {"test_table": Table { schema: "", name: "test_table", table: "" }} }}, catalog: "" }}


insert into table:
query context QueryContext { database: Some("test_db"), schema: Some("public"), worksheet_id: Some(1748275324317) }
statement in execute function Statement(Insert(Insert { or: None, ignore: false, into: true, table: TableName(ObjectName([Identifier(Ident { value: "test_table", quote_style: None, span: Span(Location(1,13)..Location(1,23)) })])), table_alias: None, columns: [Ident { value: "name", quote_style: None, span: Span(Location(1,25)..Location(1,29)) }], overwrite: false, source: Some(Query { with: None, body: Values(Values { explicit_row: false, rows: [[Identifier(Ident { value: "jatin", quote_style: Some('"'), span: Span(Location(1,39)..Location(1,46)) })]] }), order_by: None, limit: None, limit_by: [], offset: None, fetch: None, locks: [], for_clause: None, settings: None, format_clause: None }), assignments: [], partitioned: None, after_columns: [], has_table_keyword: false, on: None, returning: None, replace_into: false, priority: None, insert_alias: None, settings: None, format_clause: None }))
satement sql_staement_to_plan           Insert(Insert { or: None, ignore: false, into: true, table: TableName(ObjectName([Identifier(Ident { value: "test_table", quote_style: None, span: Span(Location(1,13)..Location(1,23)) })])), table_alias: None, columns: [Ident { value: "name", quote_style: None, span: Span(Location(1,25)..Location(1,29)) }], overwrite: false, source: Some(Query { with: None, body: Values(Values { explicit_row: false, rows: [[Identifier(Ident { value: "jatin", quote_style: Some('"'), span: Span(Location(1,39)..Location(1,46)) })]] }), order_by: None, limit: None, limit_by: [], offset: None, fetch: None, locks: [], for_clause: None, settings: None, format_clause: None }), assignments: [], partitioned: None, after_columns: [], has_table_keyword: false, on: None, returning: None, replace_into: false, priority: None, insert_alias: None, settings: None, format_clause: None })
getting to default in sql_statement_to_plan
fuck up is happening here
result Err(Plan("table 'embucket.public.test_table' not found"))
sql_statement_to_plan, result Err(DataFusion { source: Plan("table 'embucket.public.test_table' not found") })
get_custom_logical_plan, result  Err(DataFusion { source: Plan("table 'embucket.public.test_table' not found") })


table query -> created custom logical plan -> sql_statement_to_Plan